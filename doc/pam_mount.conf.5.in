.TH pam_mount.conf 5 "@PACKAGE_RELDATE@" "@PACKAGE@ @PACKAGE_VERSION@" "@PACKAGE@ @PACKAGE_VERSION@"
.SH Name
.PP
pam_mount.conf - Description of the pam_mount configuration file
.SH Overview
.PP
The pam_mount configuration file defines soft defaults for commands pam_mount
will be executing, the messages it will show, and which volumes to mount on
login. Since pam_mount 0.18, the configuration file is written in XML so as
to simplify the pam_mount code base while giving formatting freedom to the
end\-user. Special characters like \fB<\fP, \fB>\fP and \fB&\fP that are used
by XML itself must be encoded as \fB&lt;\fP, \fB&gt;\fP and \fB&amp;\fP,
respectively; additionally, \fB"\fP must be encoded as \fB&quot;\fP within a
"" area, but these three/four symbols are unlikely to be seen often anyway.
.PP
Do not use comments inside elements taking verbatim text, like
<fusermount></fusermount> - this is not handled by the pam_mount XML tree
parser.
.SH Volume definitions
.PP
Volumes are defined with the \fB<volume>\fP element, which primarily takes the
parameters as attributes, such as
.PP
<volume user="joe" fstype="nfs" server="fsbox" path="/home/%(USER)"
mountpoint="/bigdisk/%(USER)" />
.PP
and define to mount what for whom and how. There are a lot of tunables, which
are described in this section.
.SS Simple user control
.PP
The following attributes control whether the volume is going to get mounted
once the user logs in. By default, volumes apply to all users, and specifying
attributes limits it to the given conditions, i.e. they are logically ANDed.
There is a more powerful and verbose mechanism for specifying complex
conditions, described further below in the section "Extended user control".
.TP
\fBuser="\fP\fIusername\fP\fB"\fP
Limit the volume to the specified user, identified by name
.TP
\fBuid="\fP\fInumber\fP\fB"\fP or \fBuid="\fP\fInumber\fP\fB\-\fP\fInumber\fP\fB"\fP
Limit the volume to the specified user(s), identified by UID or UID range.
.TP
\fBpgrp="\fP\fIgroupname\fP\fB"\fP
Limit the volume to users which have the group identified by name as their
primary group.
.TP
\fBgid="\fP\fInumber\fP\fB"\fP or \fBgid="\fP\fInumber\fP\fB\-\fP\fInumber\fP\fB"\fP
Limit the volume to users which have the group(s) given by GID or GID range as
a primary group.
.TP
\fBsgrp="\fP\fIgroupname\fP\fB"\fP
Limit the volume to users which are a member of the group identified by name
(either as primary or secondary group).
.SS Volume configuration
The following attributes select volume source, destination, options and so on.
.TP
\fBfstype="\fP\fItype\fP\fB"\fP
The filesystem type, which can be anything your kernel, userspace and pam_mount
understand. If the fstype specifies a pam_mount\-special type, pam_mount will
handle it. Otherwise, the fstype is passed to \fBmount\fP(8) which then in turn
looks for a userspace helper
/sbin/mount.\fIfstype\fP and runs that if it exists, and in any other
case, \fBmount\fP(8) would call \fBmount\fP(2) to cause the kernel to
directly mount it. \fBmount\fP(8) knows of an
\fBauto\fP fstype, which might be helpful in some cases. Not specifying the
fstype attribute implies \fBfstype="auto"\fP. Note that mounting with \fBauto\fP
may fail if the filesystem kernel module is not loaded yet, since \fBmount\fP(8)
will check /proc/partitions.
.IP ""
The fstypes \fBcifs\fP, \fBencfs13\fP, \fBsmbfs\fP, \fBncpfs\fP, \fBfuse\fP,
\fBnfs\fP and \fBnfs\fP are overriden by pam_mount and we run the respective
helper programs directly instead of invoking \fBmount\fP(8) with the basic
default set of arguments which are often insufficient for networked
filesystems. See this manpage's section "Examples" below for more details.
.TP
\fBnoroot="1"\fP
Call the mount program without root privileges. It defaults to yes for the
\fBencfs13\fP and \fBfuse\fP fstypes, because FUSE volumes must be mounted as
the user that logs in to get access to the files by default.
.TP
\fBserver="\fP\fIname\fP\fB"\fP
Defines the server to which to connect in case of \fBcifs\fP, \fBsmbfs\fP and
\fBncpfs\fP and \fBnfs\fP fstypes. For all other fs types, this attribute is
ignored.
.TP
\fBpath="\fP\fIpath\fP\fB"\fP
This mandatory attribute specifies the location of the volume, relative to the
server (if specified).
.TP
\fBmountpoint="\fP\fIdirectory\fP\fB"\fP
This specifies the destination directory onto which the volume is mounted.
"\fB~\fP" expands to the user's home directory as present in the passwd
database, according to sh semantics. "\fB~name\fP" is \fInot\fP supported. If
this attribute is omitted, the location is read from /etc/fstab, which also
requires \fBpath\fP to be a device or a source directory of an fstab entry.
.TP
\fBoptions="\fP\fI...\fP\fB"\fP
Specifies the mount options. If omitted and /etc/fstab is used (see
\fBmountpoint\fP), the options will also be sources from fstab.
.TP
\fBssh="0"\fP or \fBssh="1"\fP
The \fBssh\fP option enables an input hack wrapper (zerossh, see
\fBpmt\-fd0ssh\fP(1)) for this volume to hand the password to ssh over an
ssh\-specific mechanism. Enable this option for any mount involving the SSH
binary, e.g. ccgfs or sshfs. Do \fInot\fP enable it for anything else or the
login will most likely hang.
.TP
\fBcipher="\fP\fIcipher\fP\fB"\fP
Cryptsetup cipher name for the volume. To be used with the \fBcrypt\fP fstype.
.TP
\fBfskeycipher="\fP\fIciphertype\fP\fB"\fP
OpenSSL cipher name for the fskey. Use with the \fBcrypt\fP fstype (dm\-crypt
and LUKS). The special cipher keyword "\fBnone\fP" may be used to directly pass
the file's contents to cryptsetup without decryption by OpenSSL.
.TP
\fBfskeyhash="\fP\fIhash\fP\fB"\fP
OpenSSL hash name for the fskey.
.TP
\fBfskeypath="\fP\fIpath\fP\fB"\fP
Path to the filesystem key.
.SH Variables
Within attributes and commands (see later section), specific placeholders or
variables, identified by \fB%(\fP\fIname\fP\fB)\fP may be used. These are
substituted at command invocation time.
.TP
\fB%(USER)\fP
Expands to the username of the user logging in.
.TP
\fB%(DOMAIN_NAME)\fP, \fB%(DOMAIN_USER)\fP
Winbind has special UNIX usernames in the form of
"\fIdomain\fP\fB\\\fP\fIusername\fP", and %(DOMAIN_NAME) and %(DOMAIN_USER)
provide the split parts of it. This is useful when a sharename on an MSAD
server is the same as the username, e.g. <volume fstype="cifs" server="fsbox"
path="%(DOMAIN_USER)" />.
.TP
\fB%(USERUID)\fP, \fB%(USERGID)\fP
The numeric UID and GID of the primary group of the user logging in.
This is obtained via getpw*(), not getuid(). It is useful in
conjunction with the uid= or gid= mount options, e.g. <volume
options="uid=%(USERUID)" />. Note that you \fBdo not\fP need to
specify uid=%(USERUID) for smbfs or cifs mounts because this is
already done automatically by pam_mount.
.TP
\fB%(GROUP)\fP
The name of the group for %(USERGID).
.PP
All other variables you might find in the source code are internal to
pam_mount, and are likely not to be expanded when you would expect it.
.SH pam_mount parameters
.PP
Besides volumes, there are other elements allowed in pam_mount.conf.xml that
control pam_mount's own behavior.
.SS General tunables
.TP
\fB<debug enable="1" />\fP
Enables verbose output during login to stderr and syslog. Some programs do not
cope with output sent on stderr, see doc/bugs.txt for a list. \fB0\fP disables
debugging, \fB1\fP enables pam_mount tracing, and \fB2\fP additionally enables
tracing in mount.crypt. The default is \fB0\fP. As the config file is parsed
linearly, the <debug> directive takes effect once it is seen - it it thus
advised to put it near the start of the file, before any <volume> definitions.
.TP
\fB<logout wait="\fP\fImicroseconds\fP\fB" hup="\fP\fIyes/no\fP\fB" term="\fP\fIyes/no\fP\fB" kill="\fP\fIyes/no\fP\fB" />\fP
Programs exist that do not terminate when the session is closed. (This applies
to the "final" close, i.e. when the last user session ends.) Examples are
processes still running in the background; or a broken X session manager that
did not clean up its children, or other X programs that did not react to the
X server termination notification. pam_mount can be configured to kill these
processes and optionally wait before sending signals.
.TP
\fB<luserconf name="\fP\fI.pam_mount.conf.xml\fP\fB" />\fP
Individual users may define additional volumes (usually in
~/.pam_mount.conf.xml) to mount if allowed by the master configuration file by
the presence of the \fB<luserconf>\fP element. With it, users may mount and
unmount any volumes they specify that they have ownership of (in case of
local mounts) - the mount process is called \fBas
superuser\fP. On some filesystem configurations this may be a security risk so
user-defined volumes are not allowed by the default pam_mount.conf.xml
distributed with pam_mount. Luserconfigs are parsed after any volumes from
the global configuration file are mounted, so mounting home directories with a
global config and then mounting further volumes from luserconfigs is possible.
.TP
\fB<mntoptions allow="\fP\fIoptions,...\fP\fB" />\fP
The <mntoptions> elements determine which options may be specified in per\-user
configuration files (see <luserconf>). It does not apply to the master file.
Specifying <mntoptions> is forbidden and ignored in per\-user configs.
It defaults to \fIallow="nosuid,nodev"\fP, and the default is cleared when the
first <mntoptions allow="..."> tag is seen. All further <mntoptions> are
additive, though.
.TP
\fB<mntoptions deny="\fP\fIoptions,...\fP\fB" />\fP
Any options listed in deny may not appear in the option list of per\-user
mounts. (Does not apply to the master file.)
.TP
\fB<mntoptions require="\fP\fIoptions,...\fP\fB" />\fP
All options listed in require must appear in the option list of per\-user
mounts. (Does not apply to the master file.)
It defaults to \fInosuid,nodev\fP, and the default is cleared when the
first <mntoptions require="..."> tag is seen. All further <mntoptions> are
additive, though.
.TP
\fB<path>\fP\fIdirectories...\fP\fB</path>\fP
The default for the PATH environmental variable is not consistent across
distributions, and so, pam_mount provides its own set of sane defaults which
you may change at will.
.SS Volume\-related
.TP
\fB<mkmountpoint enable="1" remove="true" />\fP
Controls automatic creation and removal of mountpoints. If a mountpoint does
not exist when the volume is about to be mounted, pam_mount can be instructed
to create one using the \fBenable\fP attribute. Normally, directories created
this way are retained after logout, but \fBremove\fP may be set to \fBtrue\fP
to remove the mountpoint again, \fIbut only\fP if it was automatically created
by pam_mount in the same session before.
.SS Auxiliary programs
.PP
Some mount programs need special default parameters to properly function. It is
good practice to specify uid= for CIFS for example, because it is mounted as
root and would otherwise show files belonging to root instead of the user
logging in.
.TP
\fB<fd0ssh>\fP\fIprogram...\fP\fB</fd0ssh>\fP
fd0ssh is a hack around OpenSSH that essentially makes it read passwords from
stdin even though OpenSSH normally does not do that.
.TP
\fB<fsck>\fP\fIfsck -p %(FSCKTARGET)\fP\fB</fsck>\fP
Local volumes will be checked before mounting if this program is set.
.TP
\fB<ofl>\fP\fIofl -k%(SIGNAL) %(MNTPT)\fP\fB</ofl>\fP
The Open File Lister is used to identify processes using files within the given
subdirectory, and optionally send a signal to those processes.
.TP
\fB<pmvarrun>\fP\fIpmvarrun ...\fP\fB</pmvarrun>\fP
\fBpmvarrun\fP(8) is a separate program to manage the reference count tracking
user sessions.
.SS Mount programs
.PP
Commands to mount/unmount volumes. They can take parameters, as shown. You can
specify either absolute paths, or relative ones, in which case $PATH will be
searched. Since login programs have differing default PATHs, pam_mount has its
own path definition (see above).
.TP
\fB<lclmount>\fP\fImount \-p0 \-t %(FSTYPE) ...\fP\fB</lclmount>\fP
The regular mount program.
.TP
\fB<umount>\fP\fIumount %(MNTPT)\fP\fB</umount>\fP
Unless there is a dedicated umount program for a given filesystem type, the
regular umount program will be used.
.IP ""
Linux supports lazy unmounting using `/sbin/umount \-l`. This may be dangerous
for encrypted volumes because the underlying device is not unmapped. Loopback
devices are also affected by this (not being unmapped when files are still
open). Also, unmount on SMB volumes needs to be called on %(MNTPT) and not
%(VOLUME).
.PP
Commands for various mount programs. Not all have a dedicated umount
helper because some do not need one.
.TP
\fB<cifsmount>\fP\fImount.cifs ...\fP\fB</cifsmount>\fP
.TP
\fB<cryptmount>\fP\fImount.crypt ...\fP\fB</cryptmount>\fP
.TP
\fB<cryptumount>\fP\fIumount.crypt %(MNTPT)\fP\fB</cryptumount>\fP
Mount helpers for dm\-crypt and LUKS volumes.
.TP
\fB<fusemount>\fP\fImount.fuse ...\fP\fB</fusemount>\fP
.TP
\fB<fuseumount>\fP\fIfuserumount ...\fP\fB</fuseumount>\fP
.TP
\fB<ncpmount>\fP\fIncpmount ...\fP\fB</ncpmount>\fP
.TP
\fB<ncpumount>\fP\fIncpumount ...\fP\fB</ncpumount>\fP
.TP
\fB<nfsmount>\fP\fImount %(SERVER):%(VOLUME) ...\fP\fB</nfsmount>\fP
.TP
\fB<smbmount>\fP\fIsmbmount ...\fP\fB</smbmount>\fP
.TP
\fB<smbumount>\fP\fIsmbumount ...\fP\fB</smbumount>\fP
.SS Messages
.TP
\fB<msg\-authpw>\fP\fIpam_mount password:\fP\fB</msg\-authpw>\fP
When pam_mount cannot obtain a password through PAM, or is configured to not do
so in the first place, and is configured to ask for a password interactively as
a replacement, this prompt will be shown.
.TP
\fB<msg\-sessionpw>\fP\fIreenter...:\fP\fB</msg\-sessionpw>\fP
In case the 'session' PAM block does not have the password (e.g. on su
from root to user), it will ask again. This prompt can also be customized.
.SH Extended user control
Sometimes, the simple user control attributes for the <volume> element are not
sufficient where one may want to build more complex expressions as to whom a
volume applies. Instead of attributes, extended user control is set up using
additional elements within <volume>, for example
.PP
<volume path="/dev/shm" mountpoint="~"> <and> <sgrp>students</sgrp> <not>
<sgrp>profs</sgrp> </not> </and> </volume>
.PP
Which translates to (students && !profs).
.SS Logical operators
.TP
\fB<and>\fP\fI<elements>*\fP\fB</and>\fP
All elements within this one are logically ANDed. Any number of elements may
appear.
.TP
\fB<or>\fP\fI<elements>*\fP\fB</or>\fP
All elements within this one are logically ORed. Any number of elements may
appear.
.TP
\fB<xor>\fP\fI<elements>{2}\fP\fB</xor>\fP
The two elements within the <xor> are logically XORed.
.TP
\fB<not>\fP\fI<element>\fP\fB</not>\fP
The single element within the <not> is logically negated.
.SS User selection
.TP
\fB<user>\fP\fIusername\fP\fB</user>\fP
Match against the given username.
.TP
\fB<uid>\fP\fInumber\fP\fB</uid>\fP or \fB<uid>\fP\fInumber\fP\fB\-\fP\fInumber\fP\fB</uid>\fP
Match the UID of the user logging in against a UID or UID range.
.TP
\fB<gid>\fP\fInumber\fP\fB</gid>\fP or \fB<gid>\fP\fInumber\fP\fB\-\fP\fInumber\fP\fB</gid>\fP
Match the primary group of the user logging in against a GID or GID range.
.TP
\fB<pgrp>\fP\fIgroupname\fP\fB</pgrp>\fP
Check if the user logging in has \fIgroupname\fP as the primary group.
.TP
\fB<sgrp>\fP\fIgroupname\fP\fB</sgrp>\fP
Check if the user logging in is a member of the group given by \fIname\fP
(i.e. it is either a primary or secondary group).
.SS Attributes
.TP
\fBicase="yes"\fP or \fBicase="no"\fP
The \fBicase\fP attribute may be used on \fB<user>\fP, \fB<pgrp>\fP and
\fB<sgrp>\fP to enable case\-insensitive matching (or not). It defaults to
"no".
.SH Examples
.PP
Remember that \fB~\fP can be used in the mountpoint attribute to denote the
home directory as retrievable through getpwent(3).
.SS sshfs and ccgfs
.PP
Not specifying any path after the colon (:) uses the path whereever ssh will
put you in, usually the home directory.
.PP
<volume fstype="fuse" path="sshfs#%(USER)@fileserver:" mountpoint="~" />
.PP
<volume fstype="fuse" path="ccgfs\-ssh\-pull#%(USER)@host:directory"
mountpoint="~" />
.SS encfs 1.4.x and up
.PP
<volume fstype="fuse" path="encfs#/crypto/%(USER)" mountpoint="~"
options="nonempty" />
.SS encfs 1.3.x
.PP
encfs 1.3.x did not support option passthrough, which is why a separate helper
(/sbin/mount.encfs13, installed by pam_mount) is needed. This variant also
supports 1.4.x, but it is encouraged to use fstype=fuse in that case.
.PP
<volume fstype="encfs13" path="/crypto/%(USER)" mountpoint="~"
options="nonempty" />
.SS NFS mounts
.PP
<volume fstype="nfs" server="fileserver" path="/home/%(USER)" mountpoint="~" />
.SS CIFS/SMB mounts
.PP
<volume user="user" fstype="smbfs" server="krueger" path="public"
mountpoint="/home/user/krueger" />
.SS NCP mounts
.PP
<volume user="user" fstype="ncpfs" server="krueger" path="public"
mountpoint="/home/user/krueger" options="user=user.context" />
.SS Bind mounts
.PP
This may come useful in conjunction with pam_chroot:
.PP
<volume path="/bin" mountpoint="~/bin" options="bind" />
.SS tmpfs mounts
.PP
Volatile tmpfs mount with restricted size (thanks to Mike Hommey for this
example):
.PP
<volume user="test" fstype="tmpfs" mountpoint="/home/test"
options="size=10M,uid=%(USER),mode=0700" />
.SS dm-crypt volumes
.PP
Crypt mounts require a kernel with CONFIG_BLK_DEV_DM and CONFIG_DM_CRYPT
enabled, as well as all the ciphers that are going to be used, e.g.
CONFIG_CRYPTO_AES, CONFIG_CRYPTO_BLOWFISH, CONFIG_CRYPTO_TWOFISH.
.PP
<volume path="/home/%(USER).img" mountpoint="~"
cipher="aes\-cbc\-essiv:sha256" fskeycipher="aes\-256\-cbc"
fskeyhash="sha1" fskeypath="/home/%(USER).key" />
.SS LUKS volumes
.PP
<volume path="/home/%(USER).img" mountpoint="~"
cipher="aes\-cbc\-essiv:sha256" />
.SS cryptoloop volumes
.PP
cryptoloop is not explicitly supported by pam_mount. Citing the Linux kernel
config help text: "WARNING: This device [cryptoloop] is not safe for
journal[l]ed filesystems[...]. Please use the Device Mapper [dm-crypt] module
instead."
.SS OpenBSD encrypted home
OpenBSD encrypted home directory example:
.PP
<volume path="/home/user.img" mountpoint="/home/user" options="svnd0" />
